cnt <- 0
for (i in 1:nrow(sortRandomWalkVector)) {
for (j in 1:ncol(targetMatrix)) {
if(temp[sortRandomWalkVector$node[i],j]==1 && cnt < numberTarget){
targetVector <- append(targetVector, j)
targetProbability <- append(targetProbability, sortRandomWalkVector$value[i])
cnt <- cnt + 1
temp[,j] <- 0
}
}
}
return(data.frame(target = targetVector, probability = targetProbability))
}
targetVector <- output_target_vector(sortVector, target_matrix, 10)
View(targetVector)
nodeVector <- c()
targetOut <- c()
targetProbabilityVector <- c()
unknown_drug <- sdf2ap(read.SDFset("testFile/alfuzosin.sdf"))
for (i in 1:nrow(targetVector)) {
flag = 0
for (j in 1:nrow(sortVector)) {
if(targetVector$value[i] == sortVector$value[j] && flag == 0){
nodeVector <- append(nodeVector, sortVector$value[j])
targetOut <- append(targetOut, targetVector$value[i])
targetProbabilityVector <- cmp.similarity(unknown_drug, drug_apset[j])
flag <- 1
}
}
}
for (i in 1:nrow(targetVector)) {
flag = 0
for (j in 1:nrow(sortVector)) {
if((targetVector$value[i] == sortVector$value[j]) && flag == 0){
nodeVector <- append(nodeVector, sortVector$value[j])
targetOut <- append(targetOut, targetVector$value[i])
targetProbabilityVector <- cmp.similarity(unknown_drug, drug_apset[j])
flag <- 1
}
}
}
for (i in 1:nrow(targetVector)) {
flag = FALSE
for (j in 1:nrow(sortVector)) {
if((targetVector$value[i] == sortVector$value[j]) && !flag ){
nodeVector <- append(nodeVector, sortVector$value[j])
targetOut <- append(targetOut, targetVector$value[i])
targetProbabilityVector <- cmp.similarity(unknown_drug, drug_apset[j])
flag <- TRUE
}
}
}
for (i in 1:nrow(targetVector)) {
flag = FALSE
for (j in 1:nrow(sortVector)) {
if((targetVector$value[i] == sortVector$value[j]) && !flag ){
nodeVector <- append(nodeVector, sortVector$value[j])
targetOut <- append(targetOut, targetVector$value[i])
targetProbabilityVector <- cmp.similarity(unknown_drug, drug_apset[j])
flag <- TRUE
}
}
}
for (i in 1:nrow(targetVector)) {
flag = FALSE
for (j in 1:nrow(sortVector)) {
if((targetVector$value[i] == sortVector$value[j]) && !flag ){
nodeVector <- append(nodeVector, sortVector$value[j])
targetOut <- append(targetOut, targetVector$value[i])
targetProbabilityVector <- cmp.similarity(unknown_drug, drug_apset[j])
flag <- TRUE
}
}
}
View(targetVector)
nrow(targetVector)
nrow(sortVector)
View(sortVector)
View(targetVector)
for (i in 1:nrow(targetVector)) {
flag = FALSE
for (j in 1:nrow(sortVector)) {
if((targetVector$target[i] == sortVector$value[j]) && !flag ){
nodeVector <- append(nodeVector, sortVector$value[j])
targetOut <- append(targetOut, targetVector$target[i])
targetProbabilityVector <- cmp.similarity(unknown_drug, drug_apset[j])
flag <- TRUE
}
}
}
runApp()
sortVector <- sort_RandomWalk_vector(mat1, 5)
targetVector <- output_target_vector(sortVector, target_matrix, 10)
nodeVector <- c()
targetOut <- c()
targetProbabilityVector <- c()
unknown_drug <- sdf2ap(read.SDFset("testFile/alfuzosin.sdf"))
for (i in 1:nrow(targetVector)) {
flag = FALSE
for (j in 1:nrow(sortVector)) {
if((targetVector$target[i] == sortVector$value[j]) && !flag ){
nodeVector <- append(nodeVector, sortVector$value[j])
targetOut <- append(targetOut, targetVector$target[i])
targetProbabilityVector <- append(targetProbabilityVector, cmp.similarity(unknown_drug, drug_apset[j]))
flag <- TRUE
}
}
}
for (i in 1:nrow(targetVector)) {
flag = FALSE
for (j in 1:nrow(sortVector)) {
if((targetVector$target[i] == sortVector$value[j]) && flag==FALSE ){
nodeVector <- append(nodeVector, sortVector$value[j])
targetOut <- append(targetOut, targetVector$target[i])
targetProbabilityVector <- append(targetProbabilityVector, cmp.similarity(unknown_drug, drug_apset[j]))
flag <- TRUE
}
}
}
for (i in 1:nrow(targetVector)) {
flag = FALSE
for (j in 1:nrow(sortVector)) {
if((targetVector$target[i] == sortVector$value[j]) && flag==FALSE ){
nodeVector <- append(nodeVector, sortVector$value[j])
targetOut <- append(targetOut, targetVector$target[i])
targetProbabilityVector <- append(targetProbabilityVector, cmp.similarity(unknown_drug, drug_apset[j]))
flag <- TRUE
}
}
}
for (i in 1:nrow(targetVector)) {
flag = FALSE
for (j in 1:nrow(sortVector)) {
if((targetVector$target[i] == sortVector$value[j]) && flag==FALSE ){
nodeVector <- append(nodeVector, sortVector$value[j])
targetOut <- append(targetOut, targetVector$target[i])
targetProbabilityVector <- append(targetProbabilityVector, cmp.similarity(unknown_drug, drug_apset[j]))
flag <- TRUE
}
}
}
for (i in 1:nrow(targetVector)) {
flag = FALSE
for (j in 1:nrow(sortVector)) {
if((targetVector$target[i] == sortVector$value[j]) && flag==FALSE ){
nodeVector <- append(nodeVector, sortVector$value[j])
targetOut <- append(targetOut, targetVector$target[i])
targetProbabilityVector <- append(targetProbabilityVector, cmp.similarity(unknown_drug, drug_apset[j]))
flag <- TRUE
}
}
}
targetVector$target[1]
View(targetVector)
targetVector <- output_target_vector(sortVector, target_matrix, 10)
View(targetVector)
output_target_vector <- function(sortRandomWalkVector, targetMatrix, numberTarget){
targetVector <- c()
targetProbability <- c()
temp <- targetMatrix
cnt <- 0
for (i in 1:nrow(sortRandomWalkVector)) {
for (j in 1:ncol(targetMatrix)) {
if(temp[sortRandomWalkVector$node[i],j]==1 && cnt < numberTarget){
targetVector <- append(targetVector, j)
targetProbability <- append(targetProbability, sortRandomWalkVector$value[i])
cnt <- cnt + 1
temp[,j] <- 0
}
}
}
return(data.frame(target = targetVector, probability = targetProbability))
}
targetVector <- output_target_vector(sortVector, target_matrix, 10)
targetVector$target[1]
sortVector$value[1]
View(sortVector)
for (i in 1:nrow(targetVector)) {
flag = FALSE
for (j in 1:nrow(sortVector)) {
if((targetVector$target[i] == sortVector$node[j]) && flag==FALSE ){
nodeVector <- append(nodeVector, sortVector$node[j])
targetOut <- append(targetOut, targetVector$target[i])
targetProbabilityVector <- append(targetProbabilityVector, cmp.similarity(unknown_drug, drug_apset[j]))
flag <- TRUE
}
}
}
dataForPlot <- data.frame(node = nodeVector, target = targetOut, probability = targetProbabilityVector)
ggplot(dataForPlot, aes(x=target, y= probability)) +
geom_bar(stat = "identity", width=0.2)
nodeVector
targetOut
targetProbabilityVector
View(targetVector)
View(sortVector)
sortVector <- sort_RandomWalk_vector(mat1, 5)
targetVector <- output_target_vector(sortVector, target_matrix, 10)
nodeVector <- c()
targetOut <- c()
targetProbabilityVector <- c()
unknown_drug <- sdf2ap(read.SDFset("testFile/alfuzosin.sdf"))
View(sortVector)
View(targetVector)
for (i in 1:nrow(targetVector)) {
flag = FALSE
for (j in 1:nrow(sortVector)) {
if((targetVector$probability[i] == sortVector$value[j]) && flag==FALSE ){
nodeVector <- append(nodeVector, sortVector$node[j])
targetOut <- append(targetOut, targetVector$target[i])
targetProbabilityVector <- append(targetProbabilityVector, cmp.similarity(unknown_drug, drug_apset[j]))
flag <- TRUE
}
}
}
nodeVector
targetOut
ggplot(dataForPlot, aes(x=target, y= probability)) +
geom_bar(stat = "identity", width=0.2)
dataForPlot <- data.frame(node = nodeVector, target = targetOut, probability = targetProbabilityVector)
ggplot(dataForPlot, aes(x=target, y= probability)) +
geom_bar(stat = "identity", width=0.2)
View(target)
View(drugTargetFamily)
View(target_matrix)
targetName <- colnames(target_matrix)
targetName
View(drugSDF)
View(drugs)
mechanismName <- drugs$mechanism
mechanismName
setwd("~/Thesis/Data/Shiny/inputData")
saveRDS(targetName, file = "targetName.rds")
saveRDS(mechanismName, file = "mechanismName.rds")
name <- c()
for (i in 1:length(nodeVector)) {
t1 <- targetName[targetOut[i]]
t2 <- mechanismName[nodeVector[i]]
name[i] <- paste(t2, t1, sep = "_")
}
name
dataForPlot <- data.frame(name = name, probability = targetProbabilityVector)
View(dataForPlot)
ggplot(dataForPlot, aes(x=name, y= probability)) +
geom_bar(stat = "identity", width=0.2)
runApp('~/Thesis/EDC_shiny-master')
ggplot(dataForPlot, aes(x = name, y = probability)) + #fill=factor(networks,level=nams)
geom_bar(stat = "identity", width=0.2) + theme_minimal() + ggtitle("") + #Accuracy of trained classifiers
xlab("Data Layers") +
ylab("F1-score") + scale_fill_manual(values = color_values)+
labs(x = '', fill='Data Layers') +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.title.y = element_text(size = 16),
axis.ticks.x = element_blank(),legend.position = "none",
plot.margin = margin(0, 2, 0, 4, "cm"),
panel.grid.minor = element_blank(),
plot.title = element_text(face = "bold"))
ggplot(dataForPlot, aes(x = name, y = probability)) + #fill=factor(networks,level=nams)
geom_bar(stat = "identity", width=0.2) + theme_minimal() + ggtitle("") + #Accuracy of trained classifiers
xlab("Data Layers") +
ylab("F1-score") + scale_fill_manual(values = color_values)+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.title.y = element_text(size = 16),
axis.ticks.x = element_blank(),legend.position = "none",
plot.margin = margin(0, 2, 0, 4, "cm"),
panel.grid.minor = element_blank(),
plot.title = element_text(face = "bold"))
ggplot(dataForPlot, aes(x = name, y = probability)) +
geom_bar(stat = "identity", width=0.2) + theme_minimal() + ggtitle("") + #Accuracy of trained classifiers
xlab("name") +
ylab("probability") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.title.y = element_text(size = 16),
axis.ticks.x = element_blank(),legend.position = "none",
plot.margin = margin(0, 2, 0, 4, "cm"),
panel.grid.minor = element_blank(),
plot.title = element_text(face = "bold"))
runApp('~/Thesis/Data/Shiny')
runApp('~/Thesis/Data/Shiny')
runApp('~/Thesis/Data/Shiny')
setwd("~/Thesis/Data/Shiny")
unknown_drug <- sdf2ap(read.SDFset("testFile/nortriptyline.sdf"))
runApp()
runApp()
setwd("~/Thesis/Data/Shiny")
runApp()
runApp()
sortVector <- sort_RandomWalk_vector(mat1, 5)
randomWalkMatrix <- readRDS("inputData/outMat.rds")
sortVector <- sort_RandomWalk_vector(randomWalkMatrix, 5)
View(sortVector)
sortVector <- sort_RandomWalk_vector(randomWalkMatrix, 6)
View(sortVector)
sortVector <- sort_RandomWalk_vector(randomWalkMatrix, 6)
edges1 <- c()
for (i in 1:10) {
temp <- c(sortVector[1],sortVector(i+1))
edges1 <- append(edges1, temp)
subgraph1 <- graph(edges = edges1, n = 10, directed = F)
}
sortVector <- sort_RandomWalk_vector(randomWalkMatrix, 6)
edges1 <- c()
for (i in 1:10) {
temp <- c(sortVector[1],sortVector(i+1))
edges1 <- append(edges1, temp)
subgraph1 <- graph(edges = edges1, n = 10, directed = F)
}
for (i in 1:10) {
temp <- c(sortVector[1],sortVector[i+1])
edges1 <- append(edges1, temp)
subgraph1 <- graph(edges = edges1, n = 10, directed = F)
}
View(sortVector)
for (i in 1:10) {
temp <- c(sortVector$node[1],sortVector$node[i+1])
edges1 <- append(edges1, temp)
subgraph1 <- graph(edges = edges1, n = 10, directed = F)
}
View(edges1)
View(sortVector)
for (i in 1:10) {
temp[i]= sortVector$node[i]
}
temp <- c()
for (i in 1:10) {
temp[i]= sortVector$node[i]
}
sortVector <- sort_RandomWalk_vector(randomWalkMatrix, 6)
temp <- c()
for (i in 1:10) {
temp[i] <- sortVector$node[i]
}
for (i in 1:20:2) {
edges1[i] <- temp[1]
edges1[i+1] <- temp[i+1]
}
edges1[1] <- temp[1]
edges1[2] <- temp[2]
for (i in 3:20:2) {
edges1[i] <- temp[1]
edges1[i+1] <- temp[(i+1)/2 + 1]
}
edges1[1] <- temp[1]
edges1[2] <- temp[2]
for (i in 3:18:2) {
edges1[i] <- temp[1]
edges1[i+1] <- temp[(i+1)/2 + 1]
}
for (i in 3:19:2) {
edges1[i] <- temp[1]
edges1[i+1] <- temp[(i+1)/2 + 1]
}
for (i in 3:17:2) {
edges1[i] <- temp[1]
edges1[i+1] <- temp[(i+1)/2 + 1]
}
for (i in 1:10) {
temp[i] <- sortVector$node[i]
}
vortex <- c()
edges <-c()
for (i in 1:10) {
temp[i] <- sortVector$node[i]
vortex[i] <- temp[1]
}
vortex <- c()
edges <-c()
for (i in 1:10) {
edges[i] <- sortVector$node[i]
vortex[i] <- temp[1]
}
vortex <- c()
edges <-c()
graph1 <- c()
for (i in 1:10) {
edges[i] <- sortVector$node[i]
vortex[i] <- temp[1]
graph1 <- append(graph1,vortex[i])
graph1 <- append(graph1, edges[i])
}
g1 <- graph(graph1, 10, directed = F)
plot(g1)
graph1
View(g1)
mamam <- as.matrix(g1)
View(mamam)
mamam <- as.data.frame(g1)
g1 <- graph(edges = graph1, 10, directed = F)
plot(g1)
g1 <- graph(edges = graph1, n= 10, directed = F)
plot(g1)
g1 <- graph(edges = c(1,2, 1,3, 1,4), n= 3, directed = F)
plot(g1)
g1 <- graph(edges = c(6,6, 6,73, 6,225,6,47,6,187,6,3,6,103,6,295,6,349,6,220), n= 10, directed = F)
plot(g1)
g1 <- graph(edges = c(6,6, 6,73, 6,225,6,47,6,187,6,3,6,103,6,295,6,349,6,220), n= 10, directed = F)
g1 <- graph(edges = c(6,6, 6,73, 6,225, 6,47, 6,187, 6,3, 6,103, 6,295, 6,349, 6,220), n= 10, directed = F)
plot(g1)
g1 <- graph(edges = c(6,6, 6,73, 6,225, 6,47, 6,187), n= 5, directed = F)
plot(g1)
g1 <- graph(edges = c(6,6, 6,73), n= 2, directed = F)
plot(g1)
g1 <- graph(edges = c(1,2,1,3,1,4), n= 3, directed = F)
plot(g1)
g1 <- graph(edges = c(1,21,1,3,1,4), n= 3, directed = F)
plot(g1)
make_star(10, mode = "undirected")
data <- data.frame(edges)
st <- make_star(n = 10, mode = "undirected")
plot(st, vertex.label = data$edges)
sortVector <- sort_RandomWalk_vector(randomWalkMatrix, 6)
vortex <- c()
for (i in 1:10) {
vortex[i] <- sortVector[i]
}
View(vortex)
View(sortVector)
sortVector <- sort_RandomWalk_vector(randomWalkMatrix, 6)
vortex <- c()
for (i in 1:10) {
vortex[i] <- sortVector$node[i]
}
sortVector <- sort_RandomWalk_vector(randomWalkMatrix, 6)
vortex <- c()
for (i in 1:10) {
vortex[i] <- sortVector$node[i]
}
data <- data.frame(vortex)
st <- make_star(n = 10, mode = "undirected")
plot(st, vertex.label = data$vortex)
sortVector <- sort_RandomWalk_vector(randomWalkMatrix, 6)
vortex <- c()
for (i in 1:20) {
vortex[i] <- sortVector$node[i]
}
data <- data.frame(vortex)
st <- make_star(n = 20, mode = "undirected")
plot(st, vertex.label = data$vortex)
runApp()
runApp()
source('runapp.R')
runApp('~/Thesis/EDC_shiny-master')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/Thesis/Data/Shiny")
shiny::runApp()
install.packages("rsconnect")
rsconnect::setAccountInfo(name='gpcrapp', token='1E5224919D877B5C882DBB7D33F4E4CA', secret='QoafsTQrIMa/CmwR7/LhqDyp5omZSZPMXiGZ762z')
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
detach("package:dnet", unload = TRUE)
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
mechanismName <- readRDS("~/Thesis/Data/Shiny/inputData/mechanismName.rds")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
targetName <- readRDS("~/Thesis/Data/Shiny/inputData/targetName.rds")
runApp()
runApp()
runApp()
runApp()
target <- read.csv("target.csv")
setwd("~/Thesis/Data")
target <- read.csv("target.csv")
View(target)
saveRDS(target, file = "targetabbr.rds")
setwd("~/Thesis/Data/Shiny")
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
install.packages("zoom")
library(zoom)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
View(sort_RandomWalk_vector)
x<- matrix(1:9, ncol = 3, nrow = 3)
x
x[2,]
sort_RandomWalk_vector(x, 2)
View(output_target_vector)
View(output_target_vector)
View(output_target_vector)
runApp()
runApp()
